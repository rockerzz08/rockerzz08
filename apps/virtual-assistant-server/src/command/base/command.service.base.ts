/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Command as PrismaCommand,
  Response as PrismaResponse,
  User as PrismaUser,
} from "@prisma/client";

export class CommandServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.CommandCountArgs, "select">): Promise<number> {
    return this.prisma.command.count(args);
  }

  async commands<T extends Prisma.CommandFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandFindManyArgs>
  ): Promise<PrismaCommand[]> {
    return this.prisma.command.findMany<Prisma.CommandFindManyArgs>(args);
  }
  async command<T extends Prisma.CommandFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandFindUniqueArgs>
  ): Promise<PrismaCommand | null> {
    return this.prisma.command.findUnique(args);
  }
  async createCommand<T extends Prisma.CommandCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandCreateArgs>
  ): Promise<PrismaCommand> {
    return this.prisma.command.create<T>(args);
  }
  async updateCommand<T extends Prisma.CommandUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandUpdateArgs>
  ): Promise<PrismaCommand> {
    return this.prisma.command.update<T>(args);
  }
  async deleteCommand<T extends Prisma.CommandDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CommandDeleteArgs>
  ): Promise<PrismaCommand> {
    return this.prisma.command.delete(args);
  }

  async findResponses(
    parentId: string,
    args: Prisma.ResponseFindManyArgs
  ): Promise<PrismaResponse[]> {
    return this.prisma.command
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .responses(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.command
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
